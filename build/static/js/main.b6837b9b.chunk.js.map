{"version":3,"sources":["DropdownExample.js","App.js","reportWebVitals.js","index.js"],"names":["DropdownExample","selectedBranch","setSelectedBranch","useState","inheritFrom","setInheritFrom","keyValuePairs","setKeyValuePairs","branches","setBranches","inheritValues","setInheritValues","convertArrayToObject","arrayOfObjects","obj","forEach","item","key","value","deployApiForInherit","async","response","fetch","method","headers","body","JSON","stringify","selectedInherit","ok","data","json","secrets","keyValues","Object","keys","map","console","log","error","statusText","useEffect","Error","Array","isArray","length","fetchBranches","secretKeys","fetchInheritValues","React","createElement","className","htmlFor","id","onChange","event","target","disabled","hidden","branch","style","marginBottom","pair","index","type","placeholder","concat","e","handleKeyChange","prevArray","handleValueChange","onClick","updatedPairs","filter","_","i","deleteKeyValuePair","display","justifyContent","marginRight","payload","secretName","secretValue","App","reportWebVitals","onPerfEntry","Function","then","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.b6837b9b.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\n\nconst DropdownExample = () => {\n  const [selectedBranch, setSelectedBranch] = useState('');\n  const [inheritFrom, setInheritFrom] = useState('');\n  const [keyValuePairs, setKeyValuePairs] = useState([]);\n  const [branches, setBranches] = useState([]);\n  const [inheritValues, setInheritValues] = useState([]);\n\n\n  const fetchBranches = async () => {\n    try {\n      const response = await fetch('http://localhost:3005/get-branches');\n      if (response.ok) {\n        const data = await response.json();\n        if (Array.isArray(data.branches) && data.branches.length > 0) {\n          setBranches(data.branches);\n        } else {\n          console.error('Invalid branches format in API response:', data);\n        }\n      } else {\n        throw new Error('Failed to fetch branches');\n      }\n    } catch (error) {\n      console.error('Error fetching branches:', error);\n    }\n  };\n  \n\n//========================================================================================================\n  \n  const fetchInheritValues = async () => {\n    try {\n      const response = await fetch('http://localhost:3005/get-secrets');\n      if (response.ok) {\n        const data = await response.json();\n        if (Array.isArray(data.secretKeys) && data.secretKeys.length > 0) {\n          setInheritValues(data.secretKeys);\n        } else {\n          console.error('Invalid inheritValues format in API response:', data);\n        }\n      } else {\n        throw new Error('Failed to fetch inherit values');\n      }\n    } catch (error) {\n      console.error('Error fetching inherit values:', error);\n    }\n  };\n\n//==============================================================================================================\n\n  const handleBranchChange = (event) => {\n    setSelectedBranch(event.target.value);\n  };\n  const handleInheritFromChange = (event) => {\n    setInheritFrom(event.target.value);\n    deployApiForInherit(event.target.value);\n  };\n\n\n  //==================================================================\n  //==================================================================\n  //function to convert {\"apiKey\":\"zxsdadwewew232@@#$dfdg\",\"Env\":\"Prod\",\"Ver\":\"11\",\"Role\":\"Dev\"}\n  //into array of objects [ { key : \"Env\", value : \"prod\"}...]\n  //==================================================================\n  function convertObjectToArray(obj) {\n    return Object.keys(obj).map(key => ({ key: key, value: obj[key] }));\n  }\n\n  function convertArrayToObject(arrayOfObjects) {\n    const obj = {};\n    arrayOfObjects.forEach(item => {\n      obj[item.key] = item.value;\n    });\n    return obj;\n  }\n  \n  //==================================================================\n  //==================================================================\n\n\n  \nconst deployApiForInherit = async (selectedInherit) => {\n    try {\n      const response = await fetch('http://localhost:3005/secrets-data', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          \"secretName\": selectedInherit\n        })\n      });\n  \n      if (response.ok) {\n        const data = await response.json();\n        if (data && data.secrets) {\n          const keyValues = convertObjectToArray(data.secrets);\n          console.log(\"keyValues\", keyValues);\n          setKeyValuePairs(keyValues);\n        } else {\n          console.error('Invalid secrets data format in API response:', data);\n        }\n      } else {\n        console.error('Failed to fetch data:', response.statusText);\n        // Handle the error or throw it if you want to handle it elsewhere\n      }\n    } catch (error) {\n      console.error('Error during fetch:', error);\n      // Handle the error\n    }\n  };\n  \n\n  //========================================================\n  //new key name is passed are params\n  //========================================================\n  //========================================================\n  const addKeyValuePair = (key_name = \"_new_key\") => {\n    setKeyValuePairs([...keyValuePairs, { key: `Key${keyValuePairs.length}`, value: '' }]);\n    //========================================================\n    //========================================================\n  };\n  const deleteKeyValuePair = (index) => {\n    const updatedPairs = keyValuePairs.filter((_, i) => i !== index);\n    setKeyValuePairs(updatedPairs);\n  };\n\n  const handleKeyChange = (key, value) => {\n    console.log(key)\n    setKeyValuePairs(prevArray =>\n      prevArray.map(obj =>\n        obj.key === key ? { ...obj, key: value } : obj\n      )\n    );\n  };\n\n  const handleValueChange = (key, value) => {\n    setKeyValuePairs(prevArray =>\n      prevArray.map(obj =>\n        obj.key === key ? { ...obj, value: value } : obj\n      )\n    );\n  };\n\n\n\n  \n  const deployApi = async () => {\n    console.log(convertArrayToObject(keyValuePairs));\n  \n    try {\n      const payload = {\n        branch: selectedBranch,\n        secretName: inheritFrom,\n        secretValue: convertArrayToObject(keyValuePairs),\n      };\n  \n      const response = await fetch('http://localhost:3005/deploy', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(payload),\n      });\n  \n      if (response.ok) {\n        console.log('API deployed successfully:', payload);\n      } else {\n        console.error('Failed to deploy API:', response.statusText);\n      }\n    } catch (error) {\n      console.error('Error updating API:', error);\n    }\n  };\n\n  \n  useEffect(() => {\n    fetchBranches();\n    fetchInheritValues();\n  }, []);\n  return (\n    <div className='bg-white text-black'>\n      <label htmlFor=\"branch\">Select Branch:</label>\n      <select id=\"branch\" value={selectedBranch} onChange={handleBranchChange}>\n        <option value=\"\" disabled hidden>\n          Choose a branch\n        </option>\n        {branches.map((branch) => (\n          <option key={branch} value={branch}>\n            {branch}\n          </option>\n        ))}\n      </select>\n      <div style={{ marginBottom: '10px' }}></div>\n      <label htmlFor=\"inheritFrom\">Inherit from:</label>\n      <select id=\"inheritFrom\" value={inheritFrom} onChange={handleInheritFromChange}>\n        <option value=\"\" disabled hidden>\n          Choose a value to inherit\n        </option>\n        {inheritValues.map((value) => (\n          <option key={value} value={value}>\n            {value}\n          </option>\n        ))}\n      </select>\n      {keyValuePairs.map((pair, index) => (\n        <div key={index} className=\"key-value-pair\">\n          <input\n            type=\"text\"\n            className='bg-yellow-500'\n            placeholder={`Key ${index + 1}`}\n            value={pair?.key}\n            onChange={(e) => handleKeyChange(pair.key, e.target.value)}\n          />\n          <input\n            type=\"text\"\n            className='bg-yellow-700'\n            placeholder={`Value ${index + 1}`}\n            value={pair?.value}\n            onChange={(e) => handleValueChange(pair.key, e.target.value)}\n          />\n          <button onClick={() => deleteKeyValuePair(index)}>Delete</button>\n        </div>\n      ))}\n      \n      <div style={{ display: 'flex', justifyContent: 'space-between' }}>\n        <button onClick={addKeyValuePair} style={{ marginRight: '5px' }}>\n          ADD\n        </button>\n        <button onClick={deployApi}>Deploy</button>\n      </div>\n    </div>\n  );\n};\nexport default DropdownExample;\n\n\n\n\n \n\n  \n\n","// src/App.js\nimport React from 'react';\nimport DropdownExample from './DropdownExample';\nimport './App.css'; // Import the CSS file\n\nfunction App() {\n  return (\n    <div className=\"page\">\n      <div className=\"content\">\n        <DropdownExample />\n      </div>\n    </div>\n  );\n}\n\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}